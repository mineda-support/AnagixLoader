<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category/>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>ruby</interpreter>
 <dsl-interpreter-name/>
 <text># Back Annotate v0.31 Dec 4th 2022 Copy right Seijiro Moriyama
module Backannotate
  include RBA
  # require 'YAML'
  class Backannotate
    attr_accessor :ba
    def initialize cv
      ba_file = cv.filename.sub(/\..*/,'_ba.yaml')
      if File.exist? ba_file
        @ba = YAML.load File.read(ba_file)
        @converted = []
      else
        ba_file = cv.filename.sub(/\..*/,'_table.yaml')
        if File.exist? ba_file
          initialize_ba_data ba_file, cv
        end
      end
    end
    def initialize_ba_data ba_file, cv
      layout = cv.cell.layout
      ba_table = YAML.load(File.read(ba_file))['M']
      cv.cell.each_inst{|inst|
        ba_table.each_pair{|l, w_etc|
          w_etc.each_pair{|w, a|
            # puts [a[0], inst.bbox.to_s].inspect
            x, y, = a[0][0..1].map{|b| (b/layout.dbu).to_i}
            if inside?(inst.bbox, x, y)
              puts [inst.cell.name, x, y].inspect
              ba_table[l][w].push([inst.cell.name, inst.pcell_parameters])
              #break
            end
          }
        }
      }
      @ba = ba_table
      # puts ba_table.to_yaml
    end
    def inside? box, x, y
      (x &gt; box.p1.x) &amp;&amp; (x &lt; box.p2.x) &amp;&amp;
      (y &gt; box.p1.y) &amp;&amp; (y &lt; box.p2.y)
    end
    def backannotate file, ba=@ba, &amp;block
      Dir.chdir(File.dirname file){
        ckt_name = File.basename(file).sub(File.extname(file), '').upcase
        # puts "ckt_name=#{ckt_name}"
        # puts "ba: #{ba.inspect}"
        (ba[ckt_name] &amp;&amp; ba = ba[ckt_name])||(ba['.TOP'] &amp;&amp; ba = ba['.TOP'])
        netlist = File.read(file).encode('UTF-8')
        header = netlist.slice(0..100)
        if header =~ /xschem/
          ba_xschem netlist, file, ba, &amp;block
        elsif header =~ /^Version 4/
          ba_ltspice netlist, file, ba, &amp;block
        end
      }
    end
    def ba_xschem netlist, file, ba_data=@ba, &amp;block
      new_netlist = ''
      netlist.each_line{|l|
        if l =~ /^C {(.*)\.sym}.*name=x(\d+)/
          cell = "#{$1}.sch"
          unless @converted.include? cell
            ba_xschem File.read(cell), cell, ba_data[$2]
            @converted &lt;&lt; cell
          end
        elsif l =~ /^C {(.*)\.sym}.*name=(M\d+) (.*)}/
          current = $3
          params = ba_data[$2]
          yield l, params, current, new_netlist
          next
        end
        new_netlist &lt;&lt; l
      }
      File.open(file, 'w'){|f| f.puts new_netlist}
      puts "#{file} updated"
    end
    def ba_ltspice netlist, file, ba_data, &amp;block
      #puts ba.inspect
      new_netlist = ''
      symbol = prefix = id = nil
      netlist.each_line{|l|
        if l =~ /^SYMBOL (\w+)/
          symbol = $1
        elsif l =~ /^SYMATTR InstName X(\d+)/
          id = $1
          cell = "#{symbol}.asc"
          unless @converted.include? cell
            data = ba_data['X' + id] || ba_data[symbol.upcase]
            ba_ltspice File.read(cell), cell, data, &amp;block
            @converted &lt;&lt; cell
          end
        elsif l =~ /^SYMATTR InstName (\w)(\d+)/
          prefix = $1
          id = $2
        elsif l =~ /^SYMATTR Value2 (.*)$/
          current = $1
          if prefix == 'M'
            params = ba_data[prefix+id]
            yield l, params, current, new_netlist
            next
          end
        end
        new_netlist &lt;&lt; l
      }
      File.open(file, 'w'){|f| f.puts new_netlist}
      puts "#{file} updated"
    end
  end
  app = Application.instance
  mw = app.main_window
  cv = mw.current_view.active_cellview  
  ba = Backannotate.new cv
  if ba.ba
    sch = QFileDialog::getOpenFileName(mw, 'Schematic file', File.dirname(cv.filename), 'schematic(*.asc *.sch)')
    #ba.backannotate 'op2_tb.sch'
    ba.backannotate(sch){|l, params, current, new_netlist|
      as = params['AS'].to_f.round(5)
      ad = params['AD'].to_f.round(5)
      ps = params['PS'].to_f.round(5)
      pd = params['PD'].to_f.round(5)
      erased = current.gsub(/ [ap][sd]=\S+/, '')
      new_netlist &lt;&lt;  l.sub(current, erased  + " as=#{as}p ad=#{ad}p ps=#{ps}u pd=#{pd}u")
    }    
  else
    puts "Error: backannotation does not exist under #{File.dirname cv.filename}!"
  end
end
</text>
</klayout-macro>
