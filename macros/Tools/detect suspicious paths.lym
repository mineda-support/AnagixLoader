<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category/>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <priority>0</priority>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>ruby</interpreter>
 <dsl-interpreter-name/>
 <text>def inside_box box, p
   x1, y1, x2, y2 = box
   if p.x &gt;= x1 &amp;&amp; p.x &lt;= x2 &amp;&amp; p.y &gt;= y1 &amp;&amp; p.y &lt;= y2
     return p
   end
end

def path_inspect path, cell
  boxes = []
  op = nil
  ob = nil
  # puts '*** suspect path'
  # puts "#points=#{path.num_points} for #{path}"
  path.each_point{|p|
    next if op &amp;&amp; p == op
    boxes.each{|b|
       # puts "check if #{p} is inside #{b}"
      if inside_box b, p
        puts "#{[p.x/1000.0, p.y/1000.0]} inside #{cell.name} forms self-loop at  #{b} !"
      end
    }
    boxes &lt;&lt; ob if ob
    ob = [[p.x, op.x].min - path.width, [p.y, op.y].min - path.width,
            [p.x, op.x].max + path.width, [p.y, op.y].max + path.width] if op
    op = p
  }
  nil
end    

def dump_shapes(layout, cell, layer, trans)

  itrans = RBA::ICplxTrans.from_trans(trans)

  cell.shapes(layer).each{|shape|
    next unless shape.is_path?
    path = shape.path.transformed(itrans)
    next if path.num_points &lt;= 2
    if path_inspect(path, cell)
      puts("    &lt;path&gt;#{path.to_s}&lt;/path&gt;")
    end
  }

  cell.each_inst do |inst|

    if inst.is_regular_array?

      na = inst.na
      nb = inst.nb
      a = inst.a
      b = inst.b

      (0..(na-1)).each do |ia|
        (0..(nb-1)).each do |ib|
          disp = RBA::Point.new(a.x * ia + b.x * ib, a.y * ia + b.y * ib)
          disp_trans = RBA::CplxTrans.new(RBA::Trans.new(disp))
          dump_shapes(layout, layout.cell(inst.cell_index), layer, trans * disp_trans * inst.cplx_trans)
        end
      end

    else
      dump_shapes(layout, layout.cell(inst.cell_index), layer, trans * inst.cplx_trans)
    end

  end

end

# main functionality

app = RBA::Application.instance
mw = app.main_window

lv = mw.current_view
if lv == nil
  raise "No view selected"
end

cv = lv.active_cellview
if !cv.is_valid?
  raise "No cell or no layout found"
end

layers = []

lnode = lv.begin_layers
while !lnode.at_end?
  if !lnode.current.has_children? &amp;&amp; lnode.current.layer_index &gt;=0 &amp;&amp; lnode.current.visible?(true)
    layers.push(lnode.current.layer_index)
  end
  lnode.next
end

# Ask for the file name 

    puts("&lt;shape_dump cell=\"#{cv.layout.cell_name(cv.cell_index)}\" dbu=\"#{cv.layout.dbu}\"&gt;")

    layers.each do |l|

      puts("  &lt;layer source=\"#{cv.layout.get_info(l).to_s}\"&gt;")
      dump_shapes(cv.layout, cv.cell, l, RBA::CplxTrans.new)
      puts("  &lt;/layer&gt;")

    end

    puts("&lt;/shape_dump&gt;")



</text>
</klayout-macro>
